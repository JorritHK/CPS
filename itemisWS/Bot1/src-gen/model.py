"""Implementation of statechart model.
Generated by itemis CREATE code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

class Model:
	"""Implementation of the state machine Model.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_test,
			main_region_test_drive_main,
			main_region_test_drive_main_r1stopped,
			main_region_test_drive_main_r1manual,
			main_region_test_drive_main_r1manual_r1speed,
			main_region_test_drive_main_r1manual_r1speed_r1increase_speed,
			main_region_test_drive_main_r1manual_r1speed_r1decrease_speed,
			main_region_test_drive_main_r1manual_r1rotations,
			main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_right,
			main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left,
			main_region_test_drive_main_r1automatic_mode,
			main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left,
			main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1calibrate,
			main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1finished_calibration,
			main_region_test_drive_main_r1automatic_mode_r2overrides,
			main_region_test_drive_main_r1automatic_mode_r2overrides_lidaridle,
			main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect,
			main_region_test_logging_grid_record,
			main_region_test_logging_grid_record_r1start_record,
			main_region_test_logging_grid_record_r1_final_,
			main_region_test_logging_grid_check_status,
			main_region_test_logging_grid_start,
			null_state
		) = range(23)
	
	
	class UserVar:
		"""Implementation of scope UserVar.
		"""
		
		def __init__(self, statemachine):
			self.base_speed = None
			self.base_rotation = None
			self.startprocedure = None
			
			self.statemachine = statemachine
		
	
	class BaseValues:
		"""Implementation of scope BaseValues.
		"""
		
		def __init__(self, statemachine):
			self.max_speed = None
			self.max_rotation = None
			self.degrees_front = None
			self.degrees_right = None
			self.degrees_back = None
			self.degrees_left = None
			
			self.statemachine = statemachine
		
	
	class Output:
		"""Implementation of scope Output.
		"""
		
		def __init__(self, statemachine):
			self.speed = None
			self.rotation = None
			self.obstacles = None
			self.gems = None
			self.finish = None
			
			self.statemachine = statemachine
		
	
	class Grid:
		"""Implementation of scope Grid.
		"""
		
		def __init__(self, statemachine):
			self.update = None
			self.receive = None
			self.column = None
			self.row = None
			self.orientation = None
			self.visited = None
			self.wall_front = None
			self.wall_right = None
			self.wall_back = None
			self.wall_left = None
			self.grid_size = None
			self.max_col = None
			self.max_row = None
			
			self.statemachine = statemachine
		
	
	class StartPos:
		"""Implementation of scope StartPos.
		"""
		
		def __init__(self, statemachine):
			self.set_zero = None
			self.zero_x = None
			self.zero_y = None
			self.zero_south_degree = None
			self.laser_deg_offset = None
			
			self.statemachine = statemachine
		
	
	class Computer:
		"""Implementation of scope Computer.
		"""
		
		def __init__(self, statemachine):
			self.m_press = None
			self.w_press = None
			self.a_press = None
			self.s_press = None
			self.d_press = None
			self.x_press = None
			
			self.statemachine = statemachine
		
		def raise_m_press(self):
			"""Raise method for event m_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_m_press_call)
			self.statemachine.run_cycle()
		
		def __raise_m_press_call(self):
			"""Raise callback for event m_press.
			"""
			self.m_press = True
		
		def raise_w_press(self):
			"""Raise method for event w_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_w_press_call)
			self.statemachine.run_cycle()
		
		def __raise_w_press_call(self):
			"""Raise callback for event w_press.
			"""
			self.w_press = True
		
		def raise_a_press(self):
			"""Raise method for event a_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_a_press_call)
			self.statemachine.run_cycle()
		
		def __raise_a_press_call(self):
			"""Raise callback for event a_press.
			"""
			self.a_press = True
		
		def raise_s_press(self):
			"""Raise method for event s_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_s_press_call)
			self.statemachine.run_cycle()
		
		def __raise_s_press_call(self):
			"""Raise callback for event s_press.
			"""
			self.s_press = True
		
		def raise_d_press(self):
			"""Raise method for event d_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_d_press_call)
			self.statemachine.run_cycle()
		
		def __raise_d_press_call(self):
			"""Raise callback for event d_press.
			"""
			self.d_press = True
		
		def raise_x_press(self):
			"""Raise method for event x_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_x_press_call)
			self.statemachine.run_cycle()
		
		def __raise_x_press_call(self):
			"""Raise callback for event x_press.
			"""
			self.x_press = True
		
	
	class Imu:
		"""Implementation of scope Imu.
		"""
		
		def __init__(self, statemachine):
			self.pitch = None
			self.roll = None
			self.yaw = None
			
			self.statemachine = statemachine
		
	
	class Odom:
		"""Implementation of scope Odom.
		"""
		
		def __init__(self, statemachine):
			self.x = None
			self.y = None
			self.z = None
			
			self.statemachine = statemachine
		
	
	class LaserDistance:
		"""Implementation of scope LaserDistance.
		"""
		
		def __init__(self, statemachine):
			self.d0 = None
			self.d90 = None
			self.d180 = None
			self.dm90 = None
			self.dmin = None
			self.min_deg = None
			self.dmax = None
			self.max_deg = None
			self.dmean = None
			self.dfront_min = None
			self.min_deg_f = None
			self.dfront_max = None
			self.max_deg_f = None
			self.dfront_mean = None
			self.dright_min = None
			self.min_deg_r = None
			self.dright_max = None
			self.max_deg_r = None
			self.dright_mean = None
			self.dback_min = None
			self.min_deg_b = None
			self.dback_max = None
			self.max_deg_b = None
			self.dback_mean = None
			self.dleft_min = None
			self.min_deg_l = None
			self.dleft_max = None
			self.max_deg_l = None
			self.dleft_mean = None
			
			self.statemachine = statemachine
		
	
	class LaserIntensity:
		"""Implementation of scope LaserIntensity.
		"""
		
		def __init__(self, statemachine):
			self.i0 = None
			self.i90 = None
			self.i180 = None
			self.im90 = None
			self.ifront_min = None
			self.ifront_max = None
			self.ifront_mean = None
			self.iright_min = None
			self.iright_max = None
			self.iright_mean = None
			self.iback_min = None
			self.iback_max = None
			self.iback_mean = None
			self.ileft_min = None
			self.ileft_max = None
			self.ileft_mean = None
			
			self.statemachine = statemachine
		
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		self.user_var = Model.UserVar(self)
		self.base_values = Model.BaseValues(self)
		self.output = Model.Output(self)
		self.grid = Model.Grid(self)
		self.start_pos = Model.StartPos(self)
		self.computer = Model.Computer(self)
		self.imu = Model.Imu(self)
		self.odom = Model.Odom(self)
		self.laser_distance = Model.LaserDistance(self)
		self.laser_intensity = Model.LaserIntensity(self)
		
		self.__internal_event_queue = queue.Queue()
		self.in_event_queue = queue.Queue()
		self.__calibrated_yaw = None
		self.__normalized_yaw = None
		self.GRID_DIRECTION_Y = -(1)
		self.GRID_DIRECTION_X = 1
		self.__distance_to_center = None
		self.has_calibrated = None
		self.internal_operation_callback = None
		
		# enumeration of all states:
		self.__State = Model.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 4
		for __state_index in range(4):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 4
		
		# initializations:
		#Default init sequence for statechart model
		self.__calibrated_yaw = 0.0
		self.__normalized_yaw = 0
		self.__distance_to_center = 0.0
		self.user_var.base_speed = 0.05
		self.user_var.base_rotation = 0.2
		self.user_var.startprocedure = True
		self.base_values.max_speed = 0.22
		self.base_values.max_rotation = 2.84
		self.base_values.degrees_front = 10
		self.base_values.degrees_right = 10
		self.base_values.degrees_back = 10
		self.base_values.degrees_left = 10
		self.output.speed = 0.0
		self.output.rotation = 0.0
		self.output.obstacles = 0
		self.output.gems = 0
		self.output.finish = 0
		self.grid.update = False
		self.grid.receive = False
		self.grid.column = 0
		self.grid.row = 0
		self.grid.orientation = 0
		self.grid.visited = False
		self.grid.wall_front = 0
		self.grid.wall_right = 0
		self.grid.wall_back = 0
		self.grid.wall_left = 0
		self.grid.grid_size = 0.48
		self.grid.max_col = 3
		self.grid.max_row = 3
		self.start_pos.set_zero = False
		self.start_pos.zero_x = 0.0
		self.start_pos.zero_y = 0.0
		self.start_pos.zero_south_degree = 0.0
		self.start_pos.laser_deg_offset = 0
		self.imu.pitch = 0.0
		self.imu.roll = 0.0
		self.imu.yaw = 0.0
		self.odom.x = 0.0
		self.odom.y = 0.0
		self.odom.z = 0.0
		self.laser_distance.d0 = 0.0
		self.laser_distance.d90 = 0.0
		self.laser_distance.d180 = 0.0
		self.laser_distance.dm90 = 0.0
		self.laser_distance.dmin = 0.0
		self.laser_distance.min_deg = 0
		self.laser_distance.dmax = 0.0
		self.laser_distance.max_deg = 0
		self.laser_distance.dmean = 0.0
		self.laser_distance.dfront_min = 0.0
		self.laser_distance.min_deg_f = 0
		self.laser_distance.dfront_max = 0.0
		self.laser_distance.max_deg_f = 0
		self.laser_distance.dfront_mean = 0.0
		self.laser_distance.dright_min = 0.0
		self.laser_distance.min_deg_r = 0
		self.laser_distance.dright_max = 0.0
		self.laser_distance.max_deg_r = 0
		self.laser_distance.dright_mean = 0.0
		self.laser_distance.dback_min = 0.0
		self.laser_distance.min_deg_b = 0
		self.laser_distance.dback_max = 0.0
		self.laser_distance.max_deg_b = 0
		self.laser_distance.dback_mean = 0.0
		self.laser_distance.dleft_min = 0.0
		self.laser_distance.min_deg_l = 0
		self.laser_distance.dleft_max = 0.0
		self.laser_distance.max_deg_l = 0
		self.laser_distance.dleft_mean = 0.0
		self.laser_intensity.i0 = 0.0
		self.laser_intensity.i90 = 0.0
		self.laser_intensity.i180 = 0.0
		self.laser_intensity.im90 = 0.0
		self.laser_intensity.ifront_min = 0.0
		self.laser_intensity.ifront_max = 0.0
		self.laser_intensity.ifront_mean = 0.0
		self.laser_intensity.iright_min = 0.0
		self.laser_intensity.iright_max = 0.0
		self.laser_intensity.iright_mean = 0.0
		self.laser_intensity.iback_min = 0.0
		self.laser_intensity.iback_max = 0.0
		self.laser_intensity.iback_mean = 0.0
		self.laser_intensity.ileft_min = 0.0
		self.laser_intensity.ileft_max = 0.0
		self.laser_intensity.ileft_mean = 0.0
		self.__completed = False
		self.__do_completion = False
		self.__is_executing = False
		self.__state_conf_vector_position = None
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state or self.__state_vector[3] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_test:
			return (self.__state_vector[0] >= self.__State.main_region_test)\
				and (self.__state_vector[0] <= self.__State.main_region_test_logging_grid_start)
		if s == self.__State.main_region_test_drive_main:
			return (self.__state_vector[0] >= self.__State.main_region_test_drive_main)\
				and (self.__state_vector[0] <= self.__State.main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect)
		if s == self.__State.main_region_test_drive_main_r1stopped:
			return self.__state_vector[0] == self.__State.main_region_test_drive_main_r1stopped
		if s == self.__State.main_region_test_drive_main_r1manual:
			return (self.__state_vector[0] >= self.__State.main_region_test_drive_main_r1manual)\
				and (self.__state_vector[0] <= self.__State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left)
		if s == self.__State.main_region_test_drive_main_r1manual_r1speed:
			return (self.__state_vector[0] >= self.__State.main_region_test_drive_main_r1manual_r1speed)\
				and (self.__state_vector[0] <= self.__State.main_region_test_drive_main_r1manual_r1speed_r1decrease_speed)
		if s == self.__State.main_region_test_drive_main_r1manual_r1speed_r1increase_speed:
			return self.__state_vector[0] == self.__State.main_region_test_drive_main_r1manual_r1speed_r1increase_speed
		if s == self.__State.main_region_test_drive_main_r1manual_r1speed_r1decrease_speed:
			return self.__state_vector[0] == self.__State.main_region_test_drive_main_r1manual_r1speed_r1decrease_speed
		if s == self.__State.main_region_test_drive_main_r1manual_r1rotations:
			return (self.__state_vector[0] >= self.__State.main_region_test_drive_main_r1manual_r1rotations)\
				and (self.__state_vector[0] <= self.__State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left)
		if s == self.__State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_right:
			return self.__state_vector[0] == self.__State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_right
		if s == self.__State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left:
			return self.__state_vector[0] == self.__State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left
		if s == self.__State.main_region_test_drive_main_r1automatic_mode:
			return (self.__state_vector[0] >= self.__State.main_region_test_drive_main_r1automatic_mode)\
				and (self.__state_vector[0] <= self.__State.main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect)
		if s == self.__State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left:
			return (self.__state_vector[0] >= self.__State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left)\
				and (self.__state_vector[0] <= self.__State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1finished_calibration)
		if s == self.__State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1calibrate:
			return self.__state_vector[0] == self.__State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1calibrate
		if s == self.__State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1finished_calibration:
			return self.__state_vector[0] == self.__State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1finished_calibration
		if s == self.__State.main_region_test_drive_main_r1automatic_mode_r2overrides:
			return (self.__state_vector[1] >= self.__State.main_region_test_drive_main_r1automatic_mode_r2overrides)\
				and (self.__state_vector[1] <= self.__State.main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect)
		if s == self.__State.main_region_test_drive_main_r1automatic_mode_r2overrides_lidaridle:
			return self.__state_vector[1] == self.__State.main_region_test_drive_main_r1automatic_mode_r2overrides_lidaridle
		if s == self.__State.main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect:
			return self.__state_vector[2] == self.__State.main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect
		if s == self.__State.main_region_test_logging_grid_record:
			return (self.__state_vector[3] >= self.__State.main_region_test_logging_grid_record)\
				and (self.__state_vector[3] <= self.__State.main_region_test_logging_grid_record_r1_final_)
		if s == self.__State.main_region_test_logging_grid_record_r1start_record:
			return self.__state_vector[3] == self.__State.main_region_test_logging_grid_record_r1start_record
		if s == self.__State.main_region_test_logging_grid_record_r1_final_:
			return self.__state_vector[3] == self.__State.main_region_test_logging_grid_record_r1_final_
		if s == self.__State.main_region_test_logging_grid_check_status:
			return self.__state_vector[3] == self.__State.main_region_test_logging_grid_check_status
		if s == self.__State.main_region_test_logging_grid_start:
			return self.__state_vector[3] == self.__State.main_region_test_logging_grid_start
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(4):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.__internal_event_queue.empty():
			return self.__internal_event_queue.get()
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	
	def raise_has_calibrated(self):
		"""Raise method for event has_calibrated.
		"""
		self.__internal_event_queue.put(self.__raise_has_calibrated_call)
	
	def __raise_has_calibrated_call(self):
		"""Raise callback for event has_calibrated.
		"""
		self.has_calibrated = True
	
	def __entry_action_main_region_test_drive_main_r1_stopped(self):
		"""Entry action for state 'Stopped'..
		"""
		#Entry action for state 'Stopped'.
		self.output.speed = 0.0
		self.output.rotation = 0.0
		
	def __entry_action_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed(self):
		"""Entry action for state 'Increase speed'..
		"""
		#Entry action for state 'Increase speed'.
		self.output.speed = (self.output.speed + self.user_var.base_speed)
		
	def __entry_action_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed(self):
		"""Entry action for state 'Decrease Speed'..
		"""
		#Entry action for state 'Decrease Speed'.
		self.output.speed = (self.output.speed - self.user_var.base_speed)
		
	def __entry_action_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right(self):
		"""Entry action for state 'Incr. rot. speed right'..
		"""
		#Entry action for state 'Incr. rot. speed right'.
		self.output.rotation = (self.output.rotation - self.user_var.base_rotation)
		
	def __entry_action_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left(self):
		"""Entry action for state 'Incr. rot. speed left'..
		"""
		#Entry action for state 'Incr. rot. speed left'.
		self.output.rotation = (self.output.rotation + self.user_var.base_rotation)
		
	def __entry_action_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate(self):
		"""Entry action for state 'calibrate'..
		"""
		#Entry action for state 'calibrate'.
		self.timer_service.set_timer(self, 0, 500, False)
		self.timer_service.set_timer(self, 1, (1 * 1000), True)
		self.start_pos.set_zero = True
		self.internal_operation_callback.debug("Calibrating...")
		
	def __entry_action_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration(self):
		"""Entry action for state 'finished calibration'..
		"""
		#Entry action for state 'finished calibration'.
		self.internal_operation_callback.set_calibration(self.start_pos.zero_x, self.start_pos.zero_y, self.start_pos.zero_south_degree, self.start_pos.laser_deg_offset)
		self.raise_has_calibrated()
		self.internal_operation_callback.debug("Has Calibrated")
		
	def __entry_action_main_region_test_logging_grid_record_r1_start_record(self):
		"""Entry action for state 'start record'..
		"""
		#Entry action for state 'start record'.
		self.timer_service.set_timer(self, 2, 500, True)
		self.grid.wall_front = self.internal_operation_callback.direction_has_wall(self.laser_distance.d0)
		self.grid.wall_left = self.internal_operation_callback.direction_has_wall(self.laser_distance.d90)
		self.grid.wall_back = self.internal_operation_callback.direction_has_wall(self.laser_distance.d180)
		self.grid.wall_right = self.internal_operation_callback.direction_has_wall(self.laser_distance.dm90)
		self.grid.orientation = self.internal_operation_callback.calc_orientation(self.imu.yaw)
		self.grid.visited = True
		self.grid.update = True
		self.internal_operation_callback.debug("Recorded walls:")
		self.internal_operation_callback.debug_real("wallFront", self.grid.wall_front)
		self.internal_operation_callback.debug_real("wallRight", self.grid.wall_right)
		self.internal_operation_callback.debug_real("wallBack", self.grid.wall_back)
		self.internal_operation_callback.debug_real("wallLeft", self.grid.wall_left)
		
	def __entry_action_main_region_test_logging_grid_record_r1__final_(self):
		""".
		"""
		self.__completed = True
		
	def __entry_action_main_region_test_logging_grid_check_status(self):
		"""Entry action for state 'check status'..
		"""
		#Entry action for state 'check status'.
		self.timer_service.set_timer(self, 3, (3 * 1000), True)
		
	def __exit_action_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate(self):
		"""Exit action for state 'calibrate'..
		"""
		#Exit action for state 'calibrate'.
		self.timer_service.unset_timer(self, 0)
		self.timer_service.unset_timer(self, 1)
		
	def __exit_action_main_region_test_logging_grid_record_r1_start_record(self):
		"""Exit action for state 'start record'..
		"""
		#Exit action for state 'start record'.
		self.timer_service.unset_timer(self, 2)
		
	def __exit_action_main_region_test_logging_grid_check_status(self):
		"""Exit action for state 'check status'..
		"""
		#Exit action for state 'check status'.
		self.timer_service.unset_timer(self, 3)
		
	def __enter_sequence_main_region_test_default(self):
		"""'default' enter sequence for state test.
		"""
		#'default' enter sequence for state test
		self.__enter_sequence_main_region_test_drive_default()
		self.__enter_sequence_main_region_test_logging_grid_default()
		
	def __enter_sequence_main_region_test_drive_main_default(self):
		"""'default' enter sequence for state Main.
		"""
		#'default' enter sequence for state Main
		self.__enter_sequence_main_region_test_drive_main_r1_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_stopped_default(self):
		"""'default' enter sequence for state Stopped.
		"""
		#'default' enter sequence for state Stopped
		self.__entry_action_main_region_test_drive_main_r1_stopped()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1stopped
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed_default(self):
		"""'default' enter sequence for state Increase speed.
		"""
		#'default' enter sequence for state Increase speed
		self.__entry_action_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual_r1speed_r1increase_speed
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed_default(self):
		"""'default' enter sequence for state Decrease Speed.
		"""
		#'default' enter sequence for state Decrease Speed
		self.__entry_action_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual_r1speed_r1decrease_speed
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right_default(self):
		"""'default' enter sequence for state Incr. rot. speed right.
		"""
		#'default' enter sequence for state Incr. rot. speed right
		self.__entry_action_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_right
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left_default(self):
		"""'default' enter sequence for state Incr. rot. speed left.
		"""
		#'default' enter sequence for state Incr. rot. speed left
		self.__entry_action_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_default(self):
		"""'default' enter sequence for state Automatic mode.
		"""
		#'default' enter sequence for state Automatic mode
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_default()
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_default(self):
		"""'default' enter sequence for state Follow left.
		"""
		#'default' enter sequence for state Follow left
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate_default(self):
		"""'default' enter sequence for state calibrate.
		"""
		#'default' enter sequence for state calibrate
		self.__entry_action_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1calibrate
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration_default(self):
		"""'default' enter sequence for state finished calibration.
		"""
		#'default' enter sequence for state finished calibration
		self.__entry_action_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1finished_calibration
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_default(self):
		"""'default' enter sequence for state overrides.
		"""
		#'default' enter sequence for state overrides
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_default()
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_idle_default(self):
		"""'default' enter sequence for state idle.
		"""
		#'default' enter sequence for state idle
		self.__state_vector[1] = self.State.main_region_test_drive_main_r1automatic_mode_r2overrides_lidaridle
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_correct_default(self):
		"""'default' enter sequence for state correct.
		"""
		#'default' enter sequence for state correct
		self.__state_vector[2] = self.State.main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_logging_grid_record_default(self):
		"""'default' enter sequence for state record.
		"""
		#'default' enter sequence for state record
		self.__enter_sequence_main_region_test_logging_grid_record_r1_default()
		
	def __enter_sequence_main_region_test_logging_grid_record_r1_start_record_default(self):
		"""'default' enter sequence for state start record.
		"""
		#'default' enter sequence for state start record
		self.__entry_action_main_region_test_logging_grid_record_r1_start_record()
		self.__state_vector[3] = self.State.main_region_test_logging_grid_record_r1start_record
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_logging_grid_record_r1__final__default(self):
		"""Default enter sequence for final state.
		"""
		#Default enter sequence for final state
		self.__entry_action_main_region_test_logging_grid_record_r1__final_()
		self.__state_vector[3] = self.State.main_region_test_logging_grid_record_r1_final_
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_logging_grid_check_status_default(self):
		"""'default' enter sequence for state check status.
		"""
		#'default' enter sequence for state check status
		self.__entry_action_main_region_test_logging_grid_check_status()
		self.__state_vector[3] = self.State.main_region_test_logging_grid_check_status
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_test_logging_grid_start_default(self):
		"""'default' enter sequence for state start.
		"""
		#'default' enter sequence for state start
		self.__state_vector[3] = self.State.main_region_test_logging_grid_start
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		#'default' enter sequence for region main region
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_test_drive_default(self):
		"""'default' enter sequence for region drive.
		"""
		#'default' enter sequence for region drive
		self.__react_main_region_test_drive__entry_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_test_drive_main_r1__entry_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_default(self):
		"""'default' enter sequence for region Automatic algorithm.
		"""
		#'default' enter sequence for region Automatic algorithm
		self.__react_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm__entry_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1__entry_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_default(self):
		"""'default' enter sequence for region r2.
		"""
		#'default' enter sequence for region r2
		self.__react_main_region_test_drive_main_r1_automatic_mode_r2__entry_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_default(self):
		"""'default' enter sequence for region LIDAR.
		"""
		#'default' enter sequence for region LIDAR
		self.__react_main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar__entry_default()
		
	def __enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_default(self):
		"""'default' enter sequence for region PITCH.
		"""
		#'default' enter sequence for region PITCH
		self.__react_main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch__entry_default()
		
	def __enter_sequence_main_region_test_logging_grid_default(self):
		"""'default' enter sequence for region logging grid.
		"""
		#'default' enter sequence for region logging grid
		self.__react_main_region_test_logging_grid__entry_default()
		
	def __enter_sequence_main_region_test_logging_grid_record_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_test_logging_grid_record_r1__entry_default()
		
	def __exit_sequence_main_region_test_drive_main_r1_stopped(self):
		"""Default exit sequence for state Stopped.
		"""
		#Default exit sequence for state Stopped
		self.__state_vector[0] = self.State.main_region_test_drive_main
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_manual(self):
		"""Default exit sequence for state Manual.
		"""
		#Default exit sequence for state Manual
		self.__exit_sequence_main_region_test_drive_main_r1_manual_r1()
		self.__state_vector[0] = self.State.main_region_test_drive_main
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_manual_r1_speed(self):
		"""Default exit sequence for state Speed.
		"""
		#Default exit sequence for state Speed
		self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed(self):
		"""Default exit sequence for state Increase speed.
		"""
		#Default exit sequence for state Increase speed
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual_r1speed
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed(self):
		"""Default exit sequence for state Decrease Speed.
		"""
		#Default exit sequence for state Decrease Speed
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual_r1speed
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations(self):
		"""Default exit sequence for state Rotations.
		"""
		#Default exit sequence for state Rotations
		self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right(self):
		"""Default exit sequence for state Incr. rot. speed right.
		"""
		#Default exit sequence for state Incr. rot. speed right
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual_r1rotations
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left(self):
		"""Default exit sequence for state Incr. rot. speed left.
		"""
		#Default exit sequence for state Incr. rot. speed left
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1manual_r1rotations
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_automatic_mode(self):
		"""Default exit sequence for state Automatic mode.
		"""
		#Default exit sequence for state Automatic mode
		self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm()
		self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_r2()
		self.__state_vector[0] = self.State.main_region_test_drive_main
		self.__state_vector[1] = self.State.main_region_test_drive_main
		self.__state_vector[2] = self.State.main_region_test_drive_main
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left(self):
		"""Default exit sequence for state Follow left.
		"""
		#Default exit sequence for state Follow left
		self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1()
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1automatic_mode
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate(self):
		"""Default exit sequence for state calibrate.
		"""
		#Default exit sequence for state calibrate
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate()
		
	def __exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration(self):
		"""Default exit sequence for state finished calibration.
		"""
		#Default exit sequence for state finished calibration
		self.__state_vector[0] = self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_idle(self):
		"""Default exit sequence for state idle.
		"""
		#Default exit sequence for state idle
		self.__state_vector[1] = self.State.main_region_test_drive_main_r1automatic_mode_r2overrides
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_correct(self):
		"""Default exit sequence for state correct.
		"""
		#Default exit sequence for state correct
		self.__state_vector[2] = self.State.main_region_test_drive_main_r1automatic_mode_r2overrides
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_test_logging_grid_record(self):
		"""Default exit sequence for state record.
		"""
		#Default exit sequence for state record
		self.__exit_sequence_main_region_test_logging_grid_record_r1()
		self.__state_vector[3] = self.State.main_region_test
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_test_logging_grid_record_r1_start_record(self):
		"""Default exit sequence for state start record.
		"""
		#Default exit sequence for state start record
		self.__state_vector[3] = self.State.main_region_test_logging_grid_record
		self.__state_conf_vector_position = 3
		self.__exit_action_main_region_test_logging_grid_record_r1_start_record()
		
	def __exit_sequence_main_region_test_logging_grid_record_r1__final_(self):
		"""Default exit sequence for final state..
		"""
		#Default exit sequence for final state.
		self.__state_vector[3] = self.State.main_region_test_logging_grid_record
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_test_logging_grid_check_status(self):
		"""Default exit sequence for state check status.
		"""
		#Default exit sequence for state check status
		self.__state_vector[3] = self.State.main_region_test
		self.__state_conf_vector_position = 3
		self.__exit_action_main_region_test_logging_grid_check_status()
		
	def __exit_sequence_main_region_test_logging_grid_start(self):
		"""Default exit sequence for state start.
		"""
		#Default exit sequence for state start
		self.__state_vector[3] = self.State.main_region_test
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		#Default exit sequence for region main region
		state = self.__state_vector[0]
		if state == self.State.main_region_test_drive_main_r1stopped:
			self.__exit_sequence_main_region_test_drive_main_r1_stopped()
		elif state == self.State.main_region_test_drive_main_r1manual:
			self.__exit_sequence_main_region_test_drive_main_r1_manual()
		elif state == self.State.main_region_test_drive_main_r1manual_r1speed:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed()
		elif state == self.State.main_region_test_drive_main_r1manual_r1speed_r1increase_speed:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed()
		elif state == self.State.main_region_test_drive_main_r1manual_r1speed_r1decrease_speed:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed()
		elif state == self.State.main_region_test_drive_main_r1manual_r1rotations:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations()
		elif state == self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_right:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right()
		elif state == self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left()
		elif state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left()
		elif state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1calibrate:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate()
		elif state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1finished_calibration:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration()
		state = self.__state_vector[1]
		if state == self.State.main_region_test_drive_main_r1automatic_mode_r2overrides_lidaridle:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_idle()
		state = self.__state_vector[2]
		if state == self.State.main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_correct()
		state = self.__state_vector[3]
		if state == self.State.main_region_test_logging_grid_record:
			self.__exit_sequence_main_region_test_logging_grid_record()
		elif state == self.State.main_region_test_logging_grid_record_r1start_record:
			self.__exit_sequence_main_region_test_logging_grid_record_r1_start_record()
		elif state == self.State.main_region_test_logging_grid_record_r1_final_:
			self.__exit_sequence_main_region_test_logging_grid_record_r1__final_()
		elif state == self.State.main_region_test_logging_grid_check_status:
			self.__exit_sequence_main_region_test_logging_grid_check_status()
		elif state == self.State.main_region_test_logging_grid_start:
			self.__exit_sequence_main_region_test_logging_grid_start()
		
	def __exit_sequence_main_region_test_drive_main_r1_manual_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[0]
		if state == self.State.main_region_test_drive_main_r1manual_r1speed:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed()
		elif state == self.State.main_region_test_drive_main_r1manual_r1speed_r1increase_speed:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed()
		elif state == self.State.main_region_test_drive_main_r1manual_r1speed_r1decrease_speed:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed()
		elif state == self.State.main_region_test_drive_main_r1manual_r1rotations:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations()
		elif state == self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_right:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right()
		elif state == self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left()
		
	def __exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[0]
		if state == self.State.main_region_test_drive_main_r1manual_r1speed_r1increase_speed:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed()
		elif state == self.State.main_region_test_drive_main_r1manual_r1speed_r1decrease_speed:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed()
		
	def __exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[0]
		if state == self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_right:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right()
		elif state == self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left:
			self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left()
		
	def __exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm(self):
		"""Default exit sequence for region Automatic algorithm.
		"""
		#Default exit sequence for region Automatic algorithm
		state = self.__state_vector[0]
		if state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left()
		elif state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1calibrate:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate()
		elif state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1finished_calibration:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration()
		
	def __exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[0]
		if state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1calibrate:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate()
		elif state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1finished_calibration:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration()
		
	def __exit_sequence_main_region_test_drive_main_r1_automatic_mode_r2(self):
		"""Default exit sequence for region r2.
		"""
		#Default exit sequence for region r2
		state = self.__state_vector[1]
		if state == self.State.main_region_test_drive_main_r1automatic_mode_r2overrides_lidaridle:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_idle()
		state = self.__state_vector[2]
		if state == self.State.main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect:
			self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_correct()
		
	def __exit_sequence_main_region_test_logging_grid_record_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[3]
		if state == self.State.main_region_test_logging_grid_record_r1start_record:
			self.__exit_sequence_main_region_test_logging_grid_record_r1_start_record()
		elif state == self.State.main_region_test_logging_grid_record_r1_final_:
			self.__exit_sequence_main_region_test_logging_grid_record_r1__final_()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_default()
		
	def __react_main_region_test_drive_main_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_drive_main_r1_stopped_default()
		
	def __react_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_default()
		
	def __react_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate_default()
		
	def __react_main_region_test_drive_main_r1_automatic_mode_r2__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_default()
		
	def __react_main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_idle_default()
		
	def __react_main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_correct_default()
		
	def __react_main_region_test_drive__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_drive_main_default()
		
	def __react_main_region_test_logging_grid_record_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_logging_grid_record_r1_start_record_default()
		
	def __react_main_region_test_logging_grid__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_test_logging_grid_start_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		#State machine reactions.
		return transitioned_before
	
	
	def __main_region_test_react(self, transitioned_before):
		"""Implementation of __main_region_test_react function.
		"""
		#The reactions of state test.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#Always execute local reactions.
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_react function.
		"""
		#The reactions of state Main.
		return transitioned_before
	
	
	def __main_region_test_drive_main_r1_stopped_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_stopped_react function.
		"""
		#The reactions of state Stopped.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.w_press:
					self.__exit_sequence_main_region_test_drive_main_r1_stopped()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed_default()
					self.__main_region_test_drive_main_react(0)
					transitioned_after = 0
				elif self.computer.x_press:
					self.__exit_sequence_main_region_test_drive_main_r1_stopped()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed_default()
					self.__main_region_test_drive_main_react(0)
					transitioned_after = 0
				elif self.computer.d_press:
					self.__exit_sequence_main_region_test_drive_main_r1_stopped()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right_default()
					self.__main_region_test_drive_main_react(0)
					transitioned_after = 0
				elif self.computer.a_press:
					self.__exit_sequence_main_region_test_drive_main_r1_stopped()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left_default()
					self.__main_region_test_drive_main_react(0)
					transitioned_after = 0
				elif self.computer.m_press:
					self.__exit_sequence_main_region_test_drive_main_r1_stopped()
					self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_default()
					self.__main_region_test_drive_main_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_manual_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_manual_react function.
		"""
		#The reactions of state Manual.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.s_press:
					self.__exit_sequence_main_region_test_drive_main_r1_manual()
					self.__enter_sequence_main_region_test_drive_main_r1_stopped_default()
					self.__main_region_test_drive_main_react(0)
					transitioned_after = 0
				elif self.computer.m_press:
					self.__exit_sequence_main_region_test_drive_main_r1_manual()
					self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_default()
					self.__main_region_test_drive_main_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_manual_r1_speed_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_manual_r1_speed_react function.
		"""
		#The reactions of state Speed.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_manual_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed_react function.
		"""
		#The reactions of state Increase speed.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if (self.computer.w_press) and (self.output.speed < (self.base_values.max_speed - self.user_var.base_speed)):
					self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed_default()
					self.__main_region_test_drive_main_r1_manual_r1_speed_react(0)
					transitioned_after = 0
				elif self.computer.x_press:
					self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed_default()
					self.__main_region_test_drive_main_r1_manual_r1_speed_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_manual_r1_speed_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed_react function.
		"""
		#The reactions of state Decrease Speed.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if (self.computer.x_press) and (self.output.speed > (-(self.base_values.max_speed) + self.user_var.base_speed)):
					self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed_default()
					self.__main_region_test_drive_main_r1_manual_r1_speed_react(0)
					transitioned_after = 0
				elif self.computer.w_press:
					self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed_default()
					self.__main_region_test_drive_main_r1_manual_r1_speed_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_manual_r1_speed_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_manual_r1_rotations_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_manual_r1_rotations_react function.
		"""
		#The reactions of state Rotations.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_manual_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right_react function.
		"""
		#The reactions of state Incr. rot. speed right.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if (self.computer.d_press) and (self.output.rotation > (-(self.base_values.max_rotation) + self.user_var.base_rotation)):
					self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right_default()
					self.__main_region_test_drive_main_r1_manual_r1_rotations_react(0)
					transitioned_after = 0
				elif self.computer.a_press:
					self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left_default()
					self.__main_region_test_drive_main_r1_manual_r1_rotations_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_manual_r1_rotations_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left_react function.
		"""
		#The reactions of state Incr. rot. speed left.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if (self.computer.a_press) and (self.output.rotation < (self.base_values.max_rotation - self.user_var.base_rotation)):
					self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left_default()
					self.__main_region_test_drive_main_r1_manual_r1_rotations_react(0)
					transitioned_after = 0
				elif self.computer.d_press:
					self.__exit_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left()
					self.__enter_sequence_main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right_default()
					self.__main_region_test_drive_main_r1_manual_r1_rotations_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_manual_r1_rotations_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_automatic_mode_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_automatic_mode_react function.
		"""
		#The reactions of state Automatic mode.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.m_press:
					self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode()
					self.__enter_sequence_main_region_test_drive_main_r1_stopped_default()
					self.__main_region_test_drive_main_react(0)
					transitioned_after = 2
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_react function.
		"""
		#The reactions of state Follow left.
		return transitioned_before
	
	
	def __main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate_react function.
		"""
		#The reactions of state calibrate.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 0:
				if (self.__time_events[0]) and (not self.start_pos.set_zero):
					self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate()
					self.__time_events[0] = False
					self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration_default()
					self.__main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_react(0)
					transitioned_after = 0
				elif self.__time_events[1]:
					self.__exit_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate()
					self.__time_events[1] = False
					self.__enter_sequence_main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate_default()
					self.__main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_react(0)
					transitioned_after = 0
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration_react function.
		"""
		#The reactions of state finished calibration.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_automatic_mode_r2_overrides_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_automatic_mode_r2_overrides_react function.
		"""
		#The reactions of state overrides.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_automatic_mode_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_idle_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_idle_react function.
		"""
		#The reactions of state idle.
		return transitioned_before
	
	
	def __main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_correct_react(self, transitioned_before):
		"""Implementation of __main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_correct_react function.
		"""
		#The reactions of state correct.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_drive_main_r1_automatic_mode_r2_overrides_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_logging_grid_record_react(self, transitioned_before):
		"""Implementation of __main_region_test_logging_grid_record_react function.
		"""
		#The reactions of state record.
		transitioned_after = transitioned_before
		if (self.__state_vector[3] == self.State.main_region_test_logging_grid_record_r1_final_) and self.__do_completion:
			#Default exit sequence for state record
			self.__exit_sequence_main_region_test_logging_grid_record_r1()
			self.__state_vector[3] = self.State.main_region_test
			self.__state_conf_vector_position = 3
			#'default' enter sequence for state check status
			self.__entry_action_main_region_test_logging_grid_check_status()
			self.__state_vector[3] = self.State.main_region_test_logging_grid_check_status
			self.__state_conf_vector_position = 3
			self.__state_conf_vector_changed = True
			self.__main_region_test_react(0)
		else:
			#Always execute local reactions.
			transitioned_after = self.__main_region_test_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_logging_grid_record_r1_start_record_react(self, transitioned_before):
		"""Implementation of __main_region_test_logging_grid_record_r1_start_record_react function.
		"""
		#The reactions of state start record.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if (self.__time_events[2]) and (not self.grid.update):
					self.__exit_sequence_main_region_test_logging_grid_record_r1_start_record()
					self.__time_events[2] = False
					self.__enter_sequence_main_region_test_logging_grid_record_r1__final__default()
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_logging_grid_record_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_logging_grid_record_r1__final__react(self, transitioned_before):
		"""Implementation of __main_region_test_logging_grid_record_r1__final__react function.
		"""
		#The reactions of state null.
		return self.__main_region_test_logging_grid_record_react(transitioned_before)
	
	
	def __main_region_test_logging_grid_check_status_react(self, transitioned_before):
		"""Implementation of __main_region_test_logging_grid_check_status_react function.
		"""
		#The reactions of state check status.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if not self.grid.visited:
					self.__exit_sequence_main_region_test_logging_grid_check_status()
					self.__enter_sequence_main_region_test_logging_grid_record_default()
					self.__main_region_test_react(0)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				if self.__time_events[3]:
					self.grid.column = self.internal_operation_callback.grid_position_column(self.odom.x)
					self.grid.row = self.internal_operation_callback.grid_position_row(self.odom.y)
					self.grid.receive = True
					self.__distance_to_center = self.internal_operation_callback.distance_to_grid_center(self.odom.x, self.odom.y)
					self.internal_operation_callback.debug_real("Distance to center box", self.__distance_to_center)
					self.internal_operation_callback.debug_bool("is grid visited", self.grid.visited)
				transitioned_after = self.__main_region_test_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_test_logging_grid_start_react(self, transitioned_before):
		"""Implementation of __main_region_test_logging_grid_start_react function.
		"""
		#The reactions of state start.
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.has_calibrated:
					self.__exit_sequence_main_region_test_logging_grid_start()
					self.__enter_sequence_main_region_test_logging_grid_check_status_default()
					self.__main_region_test_react(0)
					transitioned_after = 3
			#If no transition was taken
			if transitioned_after == transitioned_before:
				#then execute local reactions.
				transitioned_after = self.__main_region_test_react(transitioned_before)
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.computer.m_press = False
		self.computer.w_press = False
		self.computer.a_press = False
		self.computer.s_press = False
		self.computer.d_press = False
		self.computer.x_press = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
		self.__time_events[3] = False
	
	
	def __clear_internal_events(self):
		"""Implementation of __clear_internal_events function.
		"""
		self.has_calibrated = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.main_region_test_drive_main_r1stopped:
			transitioned = self.__main_region_test_drive_main_r1_stopped_react(transitioned)
		elif state == self.State.main_region_test_drive_main_r1manual_r1speed_r1increase_speed:
			transitioned = self.__main_region_test_drive_main_r1_manual_r1_speed_r1_increase_speed_react(transitioned)
		elif state == self.State.main_region_test_drive_main_r1manual_r1speed_r1decrease_speed:
			transitioned = self.__main_region_test_drive_main_r1_manual_r1_speed_r1_decrease_speed_react(transitioned)
		elif state == self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_right:
			transitioned = self.__main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_right_react(transitioned)
		elif state == self.State.main_region_test_drive_main_r1manual_r1rotations_r1incr__rot__speed_left:
			transitioned = self.__main_region_test_drive_main_r1_manual_r1_rotations_r1_incr__rot__speed_left_react(transitioned)
		elif state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1calibrate:
			transitioned = self.__main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_calibrate_react(transitioned)
		elif state == self.State.main_region_test_drive_main_r1automatic_mode_automatic_algorithm_follow_left_r1finished_calibration:
			transitioned = self.__main_region_test_drive_main_r1_automatic_mode_automatic_algorithm_follow_left_r1_finished_calibration_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.main_region_test_drive_main_r1automatic_mode_r2overrides_lidaridle:
				transitioned = self.__main_region_test_drive_main_r1_automatic_mode_r2_overrides_lidar_idle_react(transitioned)
		if self.__state_conf_vector_position < 2:
			state = self.__state_vector[2]
			if state == self.State.main_region_test_drive_main_r1automatic_mode_r2overrides_pitchcorrect:
				transitioned = self.__main_region_test_drive_main_r1_automatic_mode_r2_overrides_pitch_correct_react(transitioned)
		if self.__state_conf_vector_position < 3:
			state = self.__state_vector[3]
			if state == self.State.main_region_test_logging_grid_record_r1start_record:
				self.__main_region_test_logging_grid_record_r1_start_record_react(transitioned)
			elif state == self.State.main_region_test_logging_grid_record_r1_final_:
				self.__main_region_test_logging_grid_record_r1__final__react(transitioned)
			elif state == self.State.main_region_test_logging_grid_check_status:
				self.__main_region_test_logging_grid_check_status_react(transitioned)
			elif state == self.State.main_region_test_logging_grid_start:
				self.__main_region_test_logging_grid_start_react(transitioned)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		#Performs a 'run to completion' step.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.internal_operation_callback is None:
			raise ValueError("Internal operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__do_completion = False
			condition_1 = True
			while condition_1:
				if self.__completed:
					self.__do_completion = True
				self.__completed = False
				self.__micro_step()
				self.__do_completion = False
				condition_1 = self.__completed
			self.__clear_in_events()
			self.__clear_internal_events()
			condition_0 = False
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
				condition_0 = True
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		#Activates the state machine.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.internal_operation_callback is None:
			raise ValueError("Internal operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default enter sequence for statechart model
		self.__enter_sequence_main_region_default()
		self.__do_completion = False
		condition_0 = True
		while condition_0:
			if self.__completed:
				self.__do_completion = True
			self.__completed = False
			self.__micro_step()
			self.__do_completion = False
			condition_0 = self.__completed
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		#Deactivates the state machine.
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default exit sequence for statechart model
		self.__exit_sequence_main_region()
		self.__state_vector[0] = self.State.null_state
		self.__state_vector[1] = self.State.null_state
		self.__state_vector[2] = self.State.null_state
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		self.__is_executing = False
	
	
	def trigger_without_event(self):
		"""Implementation of triggerWithoutEvent function.
		"""
		self.run_cycle()
	
