/*
 * generated by Xtext 2.36.0
 */
package life.game.ui.quickfix

import life.game.validation.GameOfLifeDSLValidator
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class GameOfLifeDSLQuickfixProvider extends DefaultQuickfixProvider {
	
	// Quickfix for wrong coordinate
        
	@Fix(GameOfLifeDSLValidator.INVALID_COORD)
	def centerCoordinate(Issue issue, IssueResolutionAcceptor acceptor) {
		
		acceptor.accept(
			issue, 
			'Change the number to in range', 
			'Change the number.', 
			null
		) [
			context |
			val xtextDocument = context.xtextDocument
			
			// I spent a long time trying to implement a dynamic quickfix, so it would replace the out of range
			// number with one in range, however, the quickfix would not work with line 43 uncommented, even if I 
			// don't use root at all.
			
//			val element = xtextDocument.readOnly[ state |
//                val resource = state as XtextResource
//                resource.getEObject(issue.uriToProblem.toString())
//            ] as Coordinate
//			val root = element.eContainer.eContainer as GameSpec
//
//			var xgrid = 20
//			var ygrid = 20
//
//			if (root.grid !== null) {
//				xgrid = root.grid.gridNum.x
//				ygrid = root.grid.gridNum.y
//			}
//			
//			val replacex = xgrid/2
//			val replacey = ygrid/2
//			var replacement = ""
//			if (issue.data.get(0).equals('x')) {
//				replacement = replacex.toString
//			} else {
//				replacement = replacey.toString
//			}
//
			val replace = 0
			var replacement = replace.toString
			
			xtextDocument.replace(issue.offset, issue.length, replacement)
		]
	}
}
